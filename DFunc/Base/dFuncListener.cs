//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/corey/source/repos/DFunc\dFunc.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DFunc.Base {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="dFuncParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public interface IdFuncListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.parse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParse([NotNull] dFuncParser.ParseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.parse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParse([NotNull] dFuncParser.ParseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.importBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportBlock([NotNull] dFuncParser.ImportBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.importBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportBlock([NotNull] dFuncParser.ImportBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterImportStatement([NotNull] dFuncParser.ImportStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.importStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitImportStatement([NotNull] dFuncParser.ImportStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierFunctionCall</c>
	/// labeled alternative in <see cref="dFuncParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierFunctionCall([NotNull] dFuncParser.IdentifierFunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierFunctionCall</c>
	/// labeled alternative in <see cref="dFuncParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierFunctionCall([NotNull] dFuncParser.IdentifierFunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.functionDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDecl([NotNull] dFuncParser.FunctionDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.functionDecl"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDecl([NotNull] dFuncParser.FunctionDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParamList([NotNull] dFuncParser.ParamListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.paramList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParamList([NotNull] dFuncParser.ParamListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParam([NotNull] dFuncParser.ParamContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.param"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParam([NotNull] dFuncParser.ParamContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.functionBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionBlock([NotNull] dFuncParser.FunctionBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.functionBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionBlock([NotNull] dFuncParser.FunctionBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.inlineFunctionBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInlineFunctionBlock([NotNull] dFuncParser.InlineFunctionBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.inlineFunctionBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInlineFunctionBlock([NotNull] dFuncParser.InlineFunctionBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.piecewiseFunctionBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPiecewiseFunctionBlock([NotNull] dFuncParser.PiecewiseFunctionBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.piecewiseFunctionBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPiecewiseFunctionBlock([NotNull] dFuncParser.PiecewiseFunctionBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.piecewiseBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPiecewiseBranch([NotNull] dFuncParser.PiecewiseBranchContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.piecewiseBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPiecewiseBranch([NotNull] dFuncParser.PiecewiseBranchContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.elsePiecewiseBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElsePiecewiseBranch([NotNull] dFuncParser.ElsePiecewiseBranchContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.elsePiecewiseBranch"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElsePiecewiseBranch([NotNull] dFuncParser.ElsePiecewiseBranchContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] dFuncParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] dFuncParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.listType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListType([NotNull] dFuncParser.ListTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.listType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListType([NotNull] dFuncParser.ListTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionType([NotNull] dFuncParser.FunctionTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.functionType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionType([NotNull] dFuncParser.FunctionTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.typeList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeList([NotNull] dFuncParser.TypeListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.typeList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeList([NotNull] dFuncParser.TypeListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.exprList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprList([NotNull] dFuncParser.ExprListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.exprList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprList([NotNull] dFuncParser.ExprListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolExpression([NotNull] dFuncParser.BoolExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolExpression([NotNull] dFuncParser.BoolExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numberExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberExpression([NotNull] dFuncParser.NumberExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numberExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberExpression([NotNull] dFuncParser.NumberExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] dFuncParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] dFuncParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] dFuncParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] dFuncParser.NotExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>concatExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConcatExpression([NotNull] dFuncParser.ConcatExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>concatExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConcatExpression([NotNull] dFuncParser.ConcatExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpression([NotNull] dFuncParser.OrExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpression([NotNull] dFuncParser.OrExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>unaryMinusExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryMinusExpression([NotNull] dFuncParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>unaryMinusExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryMinusExpression([NotNull] dFuncParser.UnaryMinusExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>powerExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPowerExpression([NotNull] dFuncParser.PowerExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>powerExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPowerExpression([NotNull] dFuncParser.PowerExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>eqExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqExpression([NotNull] dFuncParser.EqExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>eqExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqExpression([NotNull] dFuncParser.EqExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpression([NotNull] dFuncParser.AndExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpression([NotNull] dFuncParser.AndExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringExpression([NotNull] dFuncParser.StringExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringExpression([NotNull] dFuncParser.StringExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionExpression([NotNull] dFuncParser.ExpressionExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionExpression([NotNull] dFuncParser.ExpressionExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddExpression([NotNull] dFuncParser.AddExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddExpression([NotNull] dFuncParser.AddExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>compExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompExpression([NotNull] dFuncParser.CompExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>compExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompExpression([NotNull] dFuncParser.CompExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallExpression([NotNull] dFuncParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallExpression([NotNull] dFuncParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>multExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultExpression([NotNull] dFuncParser.MultExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultExpression([NotNull] dFuncParser.MultExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>listExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListExpression([NotNull] dFuncParser.ListExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>listExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListExpression([NotNull] dFuncParser.ListExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ternaryExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTernaryExpression([NotNull] dFuncParser.TernaryExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ternaryExpression</c>
	/// labeled alternative in <see cref="dFuncParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTernaryExpression([NotNull] dFuncParser.TernaryExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="dFuncParser.list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterList([NotNull] dFuncParser.ListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="dFuncParser.list"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitList([NotNull] dFuncParser.ListContext context);
}
} // namespace DFunc.Base
