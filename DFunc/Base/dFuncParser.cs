//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/corey/source/repos/DFunc\dFunc.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace DFunc.Base {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class dFuncParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, PrimitiveType=6, Else=7, Or=8, 
		And=9, Equals=10, NEquals=11, GTEquals=12, LTEquals=13, Pow=14, Excl=15, 
		GT=16, LT=17, Add=18, Subtract=19, Multiply=20, Divide=21, Modulus=22, 
		OBrace=23, CBrace=24, OBracket=25, CBracket=26, OParen=27, CParen=28, 
		SColon=29, Assign=30, Comma=31, QMark=32, Colon=33, Concat=34, Bool=35, 
		KW_IMPORT=36, Number=37, Identifier=38, String=39, Comment=40, Space=41;
	public const int
		RULE_parse = 0, RULE_importBlock = 1, RULE_importStatement = 2, RULE_functionCall = 3, 
		RULE_functionDecl = 4, RULE_paramList = 5, RULE_param = 6, RULE_functionBlock = 7, 
		RULE_inlineFunctionBlock = 8, RULE_piecewiseFunctionBlock = 9, RULE_piecewiseBranch = 10, 
		RULE_elsePiecewiseBranch = 11, RULE_type = 12, RULE_listType = 13, RULE_functionType = 14, 
		RULE_typeList = 15, RULE_exprList = 16, RULE_expression = 17, RULE_list = 18;
	public static readonly string[] ruleNames = {
		"parse", "importBlock", "importStatement", "functionCall", "functionDecl", 
		"paramList", "param", "functionBlock", "inlineFunctionBlock", "piecewiseFunctionBlock", 
		"piecewiseBranch", "elsePiecewiseBranch", "type", "listType", "functionType", 
		"typeList", "exprList", "expression", "list"
	};

	private static readonly string[] _LiteralNames = {
		null, "'->'", "'=>'", "'|'", "'if'", "'then'", null, "'else'", "'or'", 
		"'and'", "'='", "'!='", "'>='", "'<='", "'^'", "'!'", "'>'", "'<'", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'{'", "'}'", "'['", "']'", "'('", "')'", 
		"';'", "':='", "','", "'?'", "':'", "'++'", null, "'import'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "PrimitiveType", "Else", "Or", "And", 
		"Equals", "NEquals", "GTEquals", "LTEquals", "Pow", "Excl", "GT", "LT", 
		"Add", "Subtract", "Multiply", "Divide", "Modulus", "OBrace", "CBrace", 
		"OBracket", "CBracket", "OParen", "CParen", "SColon", "Assign", "Comma", 
		"QMark", "Colon", "Concat", "Bool", "KW_IMPORT", "Number", "Identifier", 
		"String", "Comment", "Space"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "dFunc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static dFuncParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public dFuncParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public dFuncParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(dFuncParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportBlockContext importBlock() {
			return GetRuleContext<ImportBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext[] functionDecl() {
			return GetRuleContexts<FunctionDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclContext functionDecl(int i) {
			return GetRuleContext<FunctionDeclContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==KW_IMPORT) {
				{
				State = 38;
				importBlock();
				}
			}

			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Identifier) {
				{
				{
				State = 41;
				functionDecl();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 47;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext[] importStatement() {
			return GetRuleContexts<ImportStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement(int i) {
			return GetRuleContext<ImportStatementContext>(i);
		}
		public ImportBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterImportBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitImportBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportBlockContext importBlock() {
		ImportBlockContext _localctx = new ImportBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_importBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 49;
				importStatement();
				}
				}
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==KW_IMPORT );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KW_IMPORT() { return GetToken(dFuncParser.KW_IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(dFuncParser.String, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SColon() { return GetToken(dFuncParser.SColon, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(KW_IMPORT);
			State = 55;
			Match(String);
			State = 56;
			Match(SColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
	 
		public FunctionCallContext() { }
		public virtual void CopyFrom(FunctionCallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierFunctionCallContext : FunctionCallContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(dFuncParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(dFuncParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(dFuncParser.CParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public IdentifierFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterIdentifierFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitIdentifierFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionCall);
		int _la;
		try {
			_localctx = new IdentifierFunctionCallContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(Identifier);
			State = 59;
			Match(OParen);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 996600741904L) != 0) {
				{
				State = 60;
				exprList();
				}
			}

			State = 63;
			Match(CParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(dFuncParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(dFuncParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(dFuncParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(dFuncParser.CParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionBlockContext functionBlock() {
			return GetRuleContext<FunctionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SColon() { return GetToken(dFuncParser.SColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamListContext paramList() {
			return GetRuleContext<ParamListContext>(0);
		}
		public FunctionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclContext functionDecl() {
		FunctionDeclContext _localctx = new FunctionDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(Identifier);
			State = 66;
			Match(Assign);
			State = 67;
			Match(OParen);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Identifier) {
				{
				State = 68;
				paramList();
				}
			}

			State = 71;
			Match(CParen);
			State = 72;
			Match(T__0);
			State = 73;
			type();
			State = 74;
			functionBlock();
			State = 75;
			Match(SColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(dFuncParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(dFuncParser.Comma, i);
		}
		public ParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitParamList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamListContext paramList() {
		ParamListContext _localctx = new ParamListContext(Context, State);
		EnterRule(_localctx, 10, RULE_paramList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			param();
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 78;
				Match(Comma);
				State = 79;
				param();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(dFuncParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(dFuncParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 12, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			Match(Identifier);
			State = 86;
			Match(Colon);
			State = 87;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InlineFunctionBlockContext inlineFunctionBlock() {
			return GetRuleContext<InlineFunctionBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PiecewiseFunctionBlockContext piecewiseFunctionBlock() {
			return GetRuleContext<PiecewiseFunctionBlockContext>(0);
		}
		public FunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBlockContext functionBlock() {
		FunctionBlockContext _localctx = new FunctionBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_functionBlock);
		try {
			State = 91;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89;
				inlineFunctionBlock();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				piecewiseFunctionBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineFunctionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InlineFunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineFunctionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterInlineFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitInlineFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineFunctionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineFunctionBlockContext inlineFunctionBlock() {
		InlineFunctionBlockContext _localctx = new InlineFunctionBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_inlineFunctionBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(T__1);
			State = 94;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PiecewiseFunctionBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PiecewiseBranchContext[] piecewiseBranch() {
			return GetRuleContexts<PiecewiseBranchContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PiecewiseBranchContext piecewiseBranch(int i) {
			return GetRuleContext<PiecewiseBranchContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsePiecewiseBranchContext elsePiecewiseBranch() {
			return GetRuleContext<ElsePiecewiseBranchContext>(0);
		}
		public PiecewiseFunctionBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_piecewiseFunctionBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterPiecewiseFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitPiecewiseFunctionBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPiecewiseFunctionBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PiecewiseFunctionBlockContext piecewiseFunctionBlock() {
		PiecewiseFunctionBlockContext _localctx = new PiecewiseFunctionBlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_piecewiseFunctionBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 96;
					piecewiseBranch();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 99;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 101;
				elsePiecewiseBranch();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PiecewiseBranchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PiecewiseBranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_piecewiseBranch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterPiecewiseBranch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitPiecewiseBranch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPiecewiseBranch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PiecewiseBranchContext piecewiseBranch() {
		PiecewiseBranchContext _localctx = new PiecewiseBranchContext(Context, State);
		EnterRule(_localctx, 20, RULE_piecewiseBranch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(T__2);
			State = 105;
			expression(0);
			State = 106;
			Match(T__1);
			State = 107;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsePiecewiseBranchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(dFuncParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElsePiecewiseBranchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsePiecewiseBranch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterElsePiecewiseBranch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitElsePiecewiseBranch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsePiecewiseBranch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsePiecewiseBranchContext elsePiecewiseBranch() {
		ElsePiecewiseBranchContext _localctx = new ElsePiecewiseBranchContext(Context, State);
		EnterRule(_localctx, 22, RULE_elsePiecewiseBranch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(T__2);
			State = 110;
			Match(Else);
			State = 111;
			Match(T__1);
			State = 112;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrimitiveType() { return GetToken(dFuncParser.PrimitiveType, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionTypeContext functionType() {
			return GetRuleContext<FunctionTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_type);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PrimitiveType:
				EnterOuterAlt(_localctx, 1);
				{
				State = 114;
				Match(PrimitiveType);
				}
				break;
			case OBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 115;
				listType();
				}
				break;
			case OParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 116;
				functionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBracket() { return GetToken(dFuncParser.OBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBracket() { return GetToken(dFuncParser.CBracket, 0); }
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(OBracket);
			State = 120;
			type();
			State = 121;
			Match(CBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(dFuncParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(dFuncParser.CParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public FunctionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitFunctionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeContext functionType() {
		FunctionTypeContext _localctx = new FunctionTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(OParen);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 167772224L) != 0) {
				{
				State = 124;
				typeList();
				}
			}

			State = 127;
			Match(CParen);
			State = 128;
			Match(T__0);
			State = 129;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(dFuncParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(dFuncParser.Comma, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 30, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			type();
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 132;
				Match(Comma);
				State = 133;
				type();
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(dFuncParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(dFuncParser.Comma, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 32, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			expression(0);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 140;
				Match(Comma);
				State = 141;
				expression(0);
				}
				}
				State = 146;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bool() { return GetToken(dFuncParser.Bool, 0); }
		public BoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(dFuncParser.Number, 0); }
		public NumberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterNumberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitNumberExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(dFuncParser.Identifier, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Excl() { return GetToken(dFuncParser.Excl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Concat() { return GetToken(dFuncParser.Concat, 0); }
		public ConcatExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterConcatExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitConcatExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcatExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(dFuncParser.Or, 0); }
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(dFuncParser.Subtract, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pow() { return GetToken(dFuncParser.Pow, 0); }
		public PowerExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterPowerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitPowerExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(dFuncParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEquals() { return GetToken(dFuncParser.NEquals, 0); }
		public EqExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterEqExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitEqExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(dFuncParser.And, 0); }
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(dFuncParser.String, 0); }
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitStringExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(dFuncParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(dFuncParser.CParen, 0); }
		public ExpressionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterExpressionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitExpressionExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Add() { return GetToken(dFuncParser.Add, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Subtract() { return GetToken(dFuncParser.Subtract, 0); }
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTEquals() { return GetToken(dFuncParser.GTEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LTEquals() { return GetToken(dFuncParser.LTEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(dFuncParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(dFuncParser.LT, 0); }
		public CompExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterCompExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitCompExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(dFuncParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(dFuncParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulus() { return GetToken(dFuncParser.Modulus, 0); }
		public MultExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterMultExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitMultExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ListExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterListExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitListExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(dFuncParser.Else, 0); }
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 34;
		EnterRecursionRule(_localctx, 34, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 148;
				Match(Subtract);
				State = 149;
				expression(18);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 150;
				Match(Excl);
				State = 151;
				expression(12);
				}
				break;
			case 3:
				{
				_localctx = new TernaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 152;
				Match(T__3);
				State = 153;
				expression(0);
				State = 154;
				Match(T__4);
				State = 155;
				expression(0);
				State = 156;
				Match(Else);
				State = 157;
				expression(8);
				}
				break;
			case 4:
				{
				_localctx = new NumberExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 159;
				Match(Number);
				}
				break;
			case 5:
				{
				_localctx = new BoolExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 160;
				Match(Bool);
				}
				break;
			case 6:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 161;
				functionCall();
				}
				break;
			case 7:
				{
				_localctx = new ListExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 162;
				list();
				}
				break;
			case 8:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 163;
				Match(Identifier);
				}
				break;
			case 9:
				{
				_localctx = new StringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 164;
				Match(String);
				}
				break;
			case 10:
				{
				_localctx = new ExpressionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 165;
				Match(OParen);
				State = 166;
				expression(0);
				State = 167;
				Match(CParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 197;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 195;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 171;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 172;
						Match(Pow);
						State = 173;
						expression(17);
						}
						break;
					case 2:
						{
						_localctx = new MultExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 174;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 175;
						((MultExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 7340032L) != 0) ) {
							((MultExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 176;
						expression(17);
						}
						break;
					case 3:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 177;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 178;
						((AddExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Add || _la==Subtract) ) {
							((AddExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 179;
						expression(16);
						}
						break;
					case 4:
						{
						_localctx = new CompExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 180;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 181;
						((CompExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 208896L) != 0) ) {
							((CompExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 182;
						expression(15);
						}
						break;
					case 5:
						{
						_localctx = new EqExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 183;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 184;
						((EqExpressionContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==Equals || _la==NEquals) ) {
							((EqExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 185;
						expression(14);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 186;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 187;
						Match(And);
						State = 188;
						expression(12);
						}
						break;
					case 7:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 189;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 190;
						Match(Or);
						State = 191;
						expression(11);
						}
						break;
					case 8:
						{
						_localctx = new ConcatExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 192;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 193;
						Match(Concat);
						State = 194;
						expression(10);
						}
						break;
					}
					} 
				}
				State = 199;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OBracket() { return GetToken(dFuncParser.OBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CBracket() { return GetToken(dFuncParser.CBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IdFuncListener typedListener = listener as IdFuncListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IdFuncVisitor<TResult> typedVisitor = visitor as IdFuncVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 36, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(OBracket);
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 996600741904L) != 0) {
				{
				State = 201;
				exprList();
				}
			}

			State = 204;
			Match(CBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 17: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 17);
		case 1: return Precpred(Context, 16);
		case 2: return Precpred(Context, 15);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 13);
		case 5: return Precpred(Context, 11);
		case 6: return Precpred(Context, 10);
		case 7: return Precpred(Context, 9);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,41,207,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,3,0,40,8,0,1,0,5,0,43,8,0,
		10,0,12,0,46,9,0,1,0,1,0,1,1,4,1,51,8,1,11,1,12,1,52,1,2,1,2,1,2,1,2,1,
		3,1,3,1,3,3,3,62,8,3,1,3,1,3,1,4,1,4,1,4,1,4,3,4,70,8,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,5,1,5,1,5,5,5,81,8,5,10,5,12,5,84,9,5,1,6,1,6,1,6,1,6,1,7,
		1,7,3,7,92,8,7,1,8,1,8,1,8,1,9,4,9,98,8,9,11,9,12,9,99,1,9,3,9,103,8,9,
		1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,3,12,
		118,8,12,1,13,1,13,1,13,1,13,1,14,1,14,3,14,126,8,14,1,14,1,14,1,14,1,
		14,1,15,1,15,1,15,5,15,135,8,15,10,15,12,15,138,9,15,1,16,1,16,1,16,5,
		16,143,8,16,10,16,12,16,146,9,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
		17,3,17,170,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,
		196,8,17,10,17,12,17,199,9,17,1,18,1,18,3,18,203,8,18,1,18,1,18,1,18,0,
		1,34,19,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,0,4,1,0,20,
		22,1,0,18,19,2,0,12,13,16,17,1,0,10,11,219,0,39,1,0,0,0,2,50,1,0,0,0,4,
		54,1,0,0,0,6,58,1,0,0,0,8,65,1,0,0,0,10,77,1,0,0,0,12,85,1,0,0,0,14,91,
		1,0,0,0,16,93,1,0,0,0,18,97,1,0,0,0,20,104,1,0,0,0,22,109,1,0,0,0,24,117,
		1,0,0,0,26,119,1,0,0,0,28,123,1,0,0,0,30,131,1,0,0,0,32,139,1,0,0,0,34,
		169,1,0,0,0,36,200,1,0,0,0,38,40,3,2,1,0,39,38,1,0,0,0,39,40,1,0,0,0,40,
		44,1,0,0,0,41,43,3,8,4,0,42,41,1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,44,
		45,1,0,0,0,45,47,1,0,0,0,46,44,1,0,0,0,47,48,5,0,0,1,48,1,1,0,0,0,49,51,
		3,4,2,0,50,49,1,0,0,0,51,52,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,0,53,3,1,
		0,0,0,54,55,5,36,0,0,55,56,5,39,0,0,56,57,5,29,0,0,57,5,1,0,0,0,58,59,
		5,38,0,0,59,61,5,27,0,0,60,62,3,32,16,0,61,60,1,0,0,0,61,62,1,0,0,0,62,
		63,1,0,0,0,63,64,5,28,0,0,64,7,1,0,0,0,65,66,5,38,0,0,66,67,5,30,0,0,67,
		69,5,27,0,0,68,70,3,10,5,0,69,68,1,0,0,0,69,70,1,0,0,0,70,71,1,0,0,0,71,
		72,5,28,0,0,72,73,5,1,0,0,73,74,3,24,12,0,74,75,3,14,7,0,75,76,5,29,0,
		0,76,9,1,0,0,0,77,82,3,12,6,0,78,79,5,31,0,0,79,81,3,12,6,0,80,78,1,0,
		0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,11,1,0,0,0,84,82,1,0,
		0,0,85,86,5,38,0,0,86,87,5,33,0,0,87,88,3,24,12,0,88,13,1,0,0,0,89,92,
		3,16,8,0,90,92,3,18,9,0,91,89,1,0,0,0,91,90,1,0,0,0,92,15,1,0,0,0,93,94,
		5,2,0,0,94,95,3,34,17,0,95,17,1,0,0,0,96,98,3,20,10,0,97,96,1,0,0,0,98,
		99,1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,102,1,0,0,0,101,103,3,22,11,
		0,102,101,1,0,0,0,102,103,1,0,0,0,103,19,1,0,0,0,104,105,5,3,0,0,105,106,
		3,34,17,0,106,107,5,2,0,0,107,108,3,34,17,0,108,21,1,0,0,0,109,110,5,3,
		0,0,110,111,5,7,0,0,111,112,5,2,0,0,112,113,3,34,17,0,113,23,1,0,0,0,114,
		118,5,6,0,0,115,118,3,26,13,0,116,118,3,28,14,0,117,114,1,0,0,0,117,115,
		1,0,0,0,117,116,1,0,0,0,118,25,1,0,0,0,119,120,5,25,0,0,120,121,3,24,12,
		0,121,122,5,26,0,0,122,27,1,0,0,0,123,125,5,27,0,0,124,126,3,30,15,0,125,
		124,1,0,0,0,125,126,1,0,0,0,126,127,1,0,0,0,127,128,5,28,0,0,128,129,5,
		1,0,0,129,130,3,24,12,0,130,29,1,0,0,0,131,136,3,24,12,0,132,133,5,31,
		0,0,133,135,3,24,12,0,134,132,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,
		136,137,1,0,0,0,137,31,1,0,0,0,138,136,1,0,0,0,139,144,3,34,17,0,140,141,
		5,31,0,0,141,143,3,34,17,0,142,140,1,0,0,0,143,146,1,0,0,0,144,142,1,0,
		0,0,144,145,1,0,0,0,145,33,1,0,0,0,146,144,1,0,0,0,147,148,6,17,-1,0,148,
		149,5,19,0,0,149,170,3,34,17,18,150,151,5,15,0,0,151,170,3,34,17,12,152,
		153,5,4,0,0,153,154,3,34,17,0,154,155,5,5,0,0,155,156,3,34,17,0,156,157,
		5,7,0,0,157,158,3,34,17,8,158,170,1,0,0,0,159,170,5,37,0,0,160,170,5,35,
		0,0,161,170,3,6,3,0,162,170,3,36,18,0,163,170,5,38,0,0,164,170,5,39,0,
		0,165,166,5,27,0,0,166,167,3,34,17,0,167,168,5,28,0,0,168,170,1,0,0,0,
		169,147,1,0,0,0,169,150,1,0,0,0,169,152,1,0,0,0,169,159,1,0,0,0,169,160,
		1,0,0,0,169,161,1,0,0,0,169,162,1,0,0,0,169,163,1,0,0,0,169,164,1,0,0,
		0,169,165,1,0,0,0,170,197,1,0,0,0,171,172,10,17,0,0,172,173,5,14,0,0,173,
		196,3,34,17,17,174,175,10,16,0,0,175,176,7,0,0,0,176,196,3,34,17,17,177,
		178,10,15,0,0,178,179,7,1,0,0,179,196,3,34,17,16,180,181,10,14,0,0,181,
		182,7,2,0,0,182,196,3,34,17,15,183,184,10,13,0,0,184,185,7,3,0,0,185,196,
		3,34,17,14,186,187,10,11,0,0,187,188,5,9,0,0,188,196,3,34,17,12,189,190,
		10,10,0,0,190,191,5,8,0,0,191,196,3,34,17,11,192,193,10,9,0,0,193,194,
		5,34,0,0,194,196,3,34,17,10,195,171,1,0,0,0,195,174,1,0,0,0,195,177,1,
		0,0,0,195,180,1,0,0,0,195,183,1,0,0,0,195,186,1,0,0,0,195,189,1,0,0,0,
		195,192,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,35,
		1,0,0,0,199,197,1,0,0,0,200,202,5,25,0,0,201,203,3,32,16,0,202,201,1,0,
		0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,205,5,26,0,0,205,37,1,0,0,0,17,
		39,44,52,61,69,82,91,99,102,117,125,136,144,169,195,197,202
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace DFunc.Base
